---
import { iconPaths } from "@/components/IconPaths";
import Icon from "@/components/atoms/Icon.astro";

type Props = {
  icon: keyof typeof iconPaths;
  label: string;
  options: {
    label: string;
    selected: boolean;
    value: string;
  }[];
};

const { icon, label, options } = Astro.props;

const getCurrentOption = () => options.findLast(({ selected }) => selected);
---

<div
  class="js-select group relative text-secondary-950 transition-colors hover:text-accent-500"
>
  <div class="js-combo-label sr-only" id="combo1-label">{label}</div>
  <div
    aria-controls="listbox1"
    aria-expanded="false"
    aria-haspopup="listbox"
    aria-labelledby="combo1-label"
    class="cursor-pointer"
    data-value={getCurrentOption()?.value}
    id="combo1"
    role="combobox"
    tabindex="0"
  >
    <Icon
      class="pointer-events-none transition-transform group-hover:translate-y-1"
      icon="globe"
      size="1.5rem"
    />
    <span class="sr-only">{getCurrentOption()?.label}</span>
  </div>
  <div
    aria-labelledby="combo1-label"
    class="combo-menu absolute right-0 top-[2rem] z-50 hidden max-h-80 w-fit overflow-y-scroll rounded-md border-[0.0625rem] border-secondary-550 bg-primary-50 p-1 text-secondary-950"
    id="listbox1"
    role="listbox"
    tabindex="-1"
  >
    {
      options.map(({ label, selected, value }, index) => (
        <div
          aria-selected={`${selected}`}
          class="combo-option cursor-default rounded-md px-4 py-2 text-sm hover:bg-primary-200"
          data-value={value}
          id={`combo-${index}`}
          role="option"
        >
          {label}
        </div>
      ))
    }
  </div>
</div>

<style>
  .combo-menu {
    display: none;
    overflow: hidden;
  }

  .open .combo-menu {
    display: block;
  }

  .combo-option.option-current {
    outline: 3px solid #0067b8;
    outline-offset: -3px;
  }

  .combo-option[aria-selected="true"] {
    padding-right: 50px;
    position: relative;
  }

  .combo-option[aria-selected="true"]::after {
    border-bottom: 0.1rem solid hsl(var(--secondary-950));
    border-right: 0.1rem solid hsl(var(--secondary-950));
    content: "";
    height: 0.7rem;
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translate(0, -50%) rotate(45deg);
    width: 0.375rem;
  }
</style>

<script>
  "use strict";

  // Save a list of named combobox actions, for future readability
  const SelectActions = {
    Close: 0,
    CloseSelect: 1,
    First: 2,
    Last: 3,
    Next: 4,
    Open: 5,
    PageDown: 6,
    PageUp: 7,
    Previous: 8,
    Select: 9,
    Type: 10
  } as const;

  type SelectAction = (typeof SelectActions)[keyof typeof SelectActions];

  /*
   * Helper functions
   */

  // filter an array of options against an input string
  // returns an array of options that begin with the filter string, case-independent
  const filterOptions = (
    options: string[] = [],
    filter: string,
    exclude: string[] = []
  ): string[] => {
    return options.filter((option) => {
      const matches = option.toLowerCase().indexOf(filter.toLowerCase()) === 0;
      return matches && exclude.indexOf(option) < 0;
    });
  };

  // map a key press to an action
  const getActionFromKey = (
    event: KeyboardEvent,
    menuOpen: boolean
  ): SelectAction | undefined => {
    const { altKey, ctrlKey, key, metaKey } = event;
    const openKeys = ["ArrowDown", "ArrowUp", "Enter", " "]; // all keys that will do the default open action
    // handle opening when closed
    if (!menuOpen && openKeys.includes(key)) {
      return SelectActions.Open;
    }

    // home and end move the selected option when open or closed
    if (key === "Home") {
      return SelectActions.First;
    }
    if (key === "End") {
      return SelectActions.Last;
    }

    // handle typing characters when open or closed
    if (
      key === "Backspace" ||
      key === "Clear" ||
      (key.length === 1 && key !== " " && !altKey && !ctrlKey && !metaKey)
    ) {
      return SelectActions.Type;
    }

    // handle keys when open
    if (menuOpen) {
      if (key === "ArrowUp" && altKey) {
        return SelectActions.CloseSelect;
      } else if (key === "ArrowDown" && !altKey) {
        return SelectActions.Next;
      } else if (key === "ArrowUp") {
        return SelectActions.Previous;
      } else if (key === "PageUp") {
        return SelectActions.PageUp;
      } else if (key === "PageDown") {
        return SelectActions.PageDown;
      } else if (key === "Escape") {
        return SelectActions.Close;
      } else if (key === "Enter" || key === " ") {
        return SelectActions.CloseSelect;
      }
    }
  };

  // return the index of an option from an array of options, based on a search string
  // if the filter is multiple iterations of the same letter (e.g "aaa"), then cycle through first-letter matches
  const getIndexByLetter = (
    options: string[],
    filter: string,
    startIndex = 0
  ): number => {
    const orderedOptions = [
      ...options.slice(startIndex),
      ...options.slice(0, startIndex)
    ];
    const firstMatch = filterOptions(orderedOptions, filter)[0];
    const allSameLetter = (array: string[]) =>
      array.every((letter) => letter === array[0]);

    // first check if there is an exact match for the typed string
    if (firstMatch) {
      return options.indexOf(firstMatch);
    }

    // if the same letter is being repeated, cycle through first-letter matches
    else if (allSameLetter(filter.split(""))) {
      const matches = filterOptions(orderedOptions, filter[0]);
      return options.indexOf(matches[0]);
    }

    // if no matches, return -1
    else {
      return -1;
    }
  };

  // get an updated option index after performing an action
  const getUpdatedIndex = (
    currentIndex: number,
    maxIndex: number,
    action: SelectAction
  ): number => {
    const pageSize = 10; // used for pageup/pagedown

    switch (action) {
      case SelectActions.First:
        return 0;
      case SelectActions.Last:
        return maxIndex;
      case SelectActions.Previous:
        return Math.max(0, currentIndex - 1);
      case SelectActions.Next:
        return Math.min(maxIndex, currentIndex + 1);
      case SelectActions.PageUp:
        return Math.max(0, currentIndex - pageSize);
      case SelectActions.PageDown:
        return Math.min(maxIndex, currentIndex + pageSize);
      default:
        return currentIndex;
    }
  };

  // check if element is visible in browser view port
  const isElementInView = (element: HTMLElement): boolean => {
    const bounding = element.getBoundingClientRect();

    return (
      bounding.top >= 0 &&
      bounding.left >= 0 &&
      bounding.bottom <=
        (window.innerHeight || document.documentElement.clientHeight) &&
      bounding.right <=
        (window.innerWidth || document.documentElement.clientWidth)
    );
  };

  // check if an element is currently scrollable
  const isScrollable = (element: HTMLElement): boolean => {
    return element && element.clientHeight < element.scrollHeight;
  };

  // ensure a given child element is within the parent's visible scroll area
  // if the child is not visible, scroll the parent
  const maintainScrollVisibility = (
    activeElement: HTMLElement,
    scrollParent: HTMLElement
  ): void => {
    const { offsetHeight, offsetTop } = activeElement;
    const { offsetHeight: parentOffsetHeight, scrollTop } = scrollParent;

    const isAbove = offsetTop < scrollTop;
    const isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;

    if (isAbove) {
      scrollParent.scrollTo(0, offsetTop);
    } else if (isBelow) {
      scrollParent.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight);
    }
  };

  class Select {
    activeIndex: number;
    comboEl: HTMLElement;
    comboElLabel: HTMLElement;
    el: HTMLElement;
    idBase: string;
    ignoreBlur: boolean;
    labelEl: HTMLElement | null;
    listboxEl: HTMLElement;
    open: boolean;
    options: NodeListOf<Element>;
    searchString: string;
    searchTimeout: number | undefined;

    constructor(el: HTMLElement, options: string[] = []) {
      // element refs
      this.el = el;
      this.labelEl = el.querySelector(".js-combo-label");
      this.comboEl = el.querySelector("[role=combobox]") as HTMLElement;
      this.comboElLabel = el.querySelector(
        "[role=combobox] span"
      ) as HTMLElement;
      this.listboxEl = el.querySelector("[role=listbox]") as HTMLElement;
      this.options = el.querySelectorAll("[role=option]");

      // data
      this.idBase = this.comboEl.id || "combo";

      // state
      this.activeIndex = 0;
      this.open = false;
      this.searchString = "";
      this.searchTimeout = undefined;
      this.ignoreBlur = false;

      // init
      if (el && this.comboEl && this.listboxEl) {
        this.init();
      }
    }

    getSearchString(char: string): string {
      // reset typing timeout and start new timeout
      // this allows us to make multiple-letter matches, like a native select
      if (typeof this.searchTimeout === "number") {
        window.clearTimeout(this.searchTimeout);
      }

      this.searchTimeout = window.setTimeout(() => {
        this.searchString = "";
      }, 500);

      // add most recent letter to saved search string
      this.searchString += char;
      return this.searchString;
    }

    init() {
      // add event listeners
      this.labelEl?.addEventListener("click", this.onLabelClick.bind(this));
      this.comboEl.addEventListener("blur", this.onComboBlur.bind(this));
      this.listboxEl.addEventListener("focusout", this.onComboBlur.bind(this));
      this.comboEl.addEventListener("click", this.onComboClick.bind(this));
      this.comboEl.addEventListener("keydown", this.onComboKeyDown.bind(this));
      this.options.forEach((option, index) => {
        option.addEventListener("click", (event) => {
          event.stopPropagation();
          this.onOptionClick(index);
        });
        option.addEventListener("mousedown", this.onOptionMouseDown.bind(this));
      });
    }

    onComboBlur(event: FocusEvent) {
      // do nothing if relatedTarget is contained within listboxEl
      if (this.listboxEl.contains(event.relatedTarget as Node)) {
        return;
      }

      // select current option and close
      if (this.open) {
        this.updateMenuState(false, false);
      }
    }

    onComboClick() {
      this.updateMenuState(!this.open);
    }

    onComboKeyDown(event: KeyboardEvent) {
      const { key } = event;
      const max = this.options.length - 1;

      const action = getActionFromKey(event, this.open);

      switch (action) {
        case SelectActions.Last:
        case SelectActions.First:
          this.updateMenuState(true);
        // intentional fallthrough
        case SelectActions.Next:
        case SelectActions.Previous:
        case SelectActions.PageUp:
        case SelectActions.PageDown:
          event.preventDefault();
          return this.onOptionChange(
            getUpdatedIndex(this.activeIndex, max, action)
          );
        case SelectActions.CloseSelect:
          event.preventDefault();
          this.selectOption(this.activeIndex);
        // intentional fallthrough
        case SelectActions.Close:
          event.preventDefault();
          return this.updateMenuState(false);
        case SelectActions.Type:
          return this.onComboType(key);
        case SelectActions.Open:
          event.preventDefault();
          return this.updateMenuState(true);
      }
    }

    onComboType(letter: string) {
      // open the listbox if it is closed
      this.updateMenuState(true);

      const optionsLabels = Array.from(this.options).map(
        (option) => option.innerHTML
      );

      // find the index of the first matching option
      const searchString = this.getSearchString(letter);
      const searchIndex = getIndexByLetter(
        optionsLabels,
        searchString,
        this.activeIndex + 1
      );

      // if a match was found, go to it
      if (searchIndex >= 0) {
        this.onOptionChange(searchIndex);
      }
      // if no matches, clear the timeout and search string
      else {
        window.clearTimeout(this.searchTimeout);
        this.searchString = "";
      }
    }

    onLabelClick() {
      this.comboEl.focus();
    }

    onOptionChange(index: number) {
      // update state
      this.activeIndex = index;

      // update aria-activedescendant
      this.comboEl.setAttribute(
        "aria-activedescendant",
        `${this.idBase}-${index}`
      );

      // update active option styles
      const options = this.el.querySelectorAll("[role=option]");
      [...options].forEach((optionEl) => {
        optionEl.classList.remove("option-current");
      });
      options[index].classList.add("option-current");

      // ensure the new option is in view
      if (isScrollable(this.listboxEl)) {
        maintainScrollVisibility(options[index] as HTMLElement, this.listboxEl);
      }

      // ensure the new option is visible on screen
      if (!isElementInView(options[index] as HTMLElement)) {
        options[index].scrollIntoView({ behavior: "smooth", block: "nearest" });
      }
    }

    onOptionClick(index: number) {
      this.onOptionChange(index);
      this.selectOption(index);
      this.updateMenuState(false);
    }

    onOptionMouseDown() {
      // Clicking an option will cause a blur event,
      // but we don't want to perform the default keyboard blur action
      this.ignoreBlur = true;
    }

    selectOption(index: number) {
      // update state
      this.activeIndex = index;

      // update displayed value
      const selected = this.options[index];
      this.comboElLabel.innerHTML = selected.innerHTML;
      this.comboEl.setAttribute(
        "data-value",
        selected.getAttribute("data-value") as string
      );

      // trigger change event on comboEl
      this.comboEl.dispatchEvent(new Event("change"));

      // update aria-selected
      const options = this.el.querySelectorAll("[role=option]");
      [...options].forEach((optionEl) => {
        optionEl.setAttribute("aria-selected", "false");
      });
      options[index].setAttribute("aria-selected", "true");
    }

    updateMenuState(open: boolean, callFocus = true) {
      if (this.open === open) {
        return;
      }

      // update state
      this.open = open;

      // update aria-expanded and styles
      this.comboEl.setAttribute("aria-expanded", `${open}`);
      open ? this.el.classList.add("open") : this.el.classList.remove("open");

      // update activedescendant
      const activeID = open ? `${this.idBase}-${this.activeIndex}` : "";
      this.comboEl.setAttribute("aria-activedescendant", activeID);

      if (activeID === "" && !isElementInView(this.comboEl)) {
        this.comboEl.scrollIntoView({ behavior: "smooth", block: "nearest" });
      }

      // move focus back to the combobox, if needed
      callFocus && this.comboEl.focus();
    }
  }

  // init select
  window.addEventListener("load", () => {
    const selectEls = document.querySelectorAll(".js-select");

    selectEls.forEach((el) => {
      new Select(el as HTMLElement);
    });
  });
</script>
