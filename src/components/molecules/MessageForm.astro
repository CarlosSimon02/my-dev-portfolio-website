---
import Button from "@/components/atoms/Button.astro";
import Icon from "@/components/atoms/Icon.astro";
import InputTextField from "@/components/atoms/InputTextField.astro";

export type MessgeFormUITranslationsType = {
  emailLabel: string;
  messageLabel: string;
  nameLabel: string;
  submitLabel: string;
};

type Props = {
  class?: string;
  translations: MessgeFormUITranslationsType;
};

const { class: className, translations: t } = Astro.props;
---

<form
  class:list={["grid gap-5 md:gap-8", className]}
  data-netlify="true"
  method="POST"
  name="message"
  novalidate
>
  <InputTextField
    id="name"
    label={t.nameLabel}
    placeholder="e.g. Juan Dela Cruz"
  />
  <InputTextField
    id="email"
    label={t.emailLabel}
    placeholder="e.g. example@gmail.com"
    type="email"
  />
  <InputTextField
    id="message"
    label={t.messageLabel}
    placeholder="e.g. Hello! Let's connect!"
    type="textarea"
  />
  <Button
    class="submit max-w-none justify-self-stretch md:max-w-[12.5rem]"
    styleType="accent"
    type="submit"
  >
    <span class="loading hidden">
      <Icon class="animate-spin" icon="loading" size="1rem" />
    </span>
    <span class="default">
      {t.submitLabel}
    </span>
  </Button>
</form>

<script>
  import { Toast } from "jolty";
  import * as yup from "yup";

  type FormData = {
    name: string;
    // eslint-disable-next-line perfectionist/sort-object-types
    email: string;
    message: string;
  };

  Toast.template(({ autohide, content, dismiss, type }) => {
    const className = `ui-toast ${type ? "ui-toast--" + type : ""}`;
    const closeBtn = dismiss
      ? `<button class="ui-btn-close ui-btn-close--no-bg" aria-label="Close"></button>`
      : "";
    const progress = autohide
      ? '<div class="ui-toast-progress" data-ui-autohide-progress></div>'
      : "";
    return `<div class="${className}" data-ui-dismiss><div class="ui-toast-icon"></div><div class="ui-toast-content">${content}</div>${closeBtn}${progress}</div>`;
  });

  const toast = {
    error: (content: string) =>
      new Toast({ content, position: "bottom-start", type: "danger" }),
    success: (content: string) =>
      new Toast({ content, position: "bottom-start", type: "success" })
  };

  const getCurrentLocale = () => {
    const pathname = window.location.pathname;
    const pathSegments = pathname.split("/").filter(Boolean); // Filter out empty segments

    let locale = "";

    if (pathSegments.length > 0) {
      locale = pathSegments[0];
      if (locale !== "en" && locale !== "fil") {
        locale = "unknown";
      }
    } else {
      locale = "unknown";
    }

    return locale;
  };
  const currentLocale = getCurrentLocale() as "en" | "fil";
  const errorMessages = {
    en: {
      email: {
        invalid: "Invalid email format",
        required: "Email is required"
      },
      message: {
        required: "You forgot your message"
      },
      name: {
        required: "Name is required"
      }
    },
    fil: {
      email: {
        invalid: "Maling <i>format</i> ng <i>email</i>",
        required: "Kinakailangan ang <i>email</i>"
      },
      message: {
        required: "Nakalimutan mo ang iyong mensahe"
      },
      name: {
        required: "Kinakailangan ang pangalan"
      }
    }
  };
  const messageFormSchema = yup.object().shape({
    name: yup.string().required(errorMessages[currentLocale].name.required),
    // eslint-disable-next-line perfectionist/sort-objects
    email: yup
      .string()
      .email(errorMessages[currentLocale].email.invalid)
      .required(errorMessages[currentLocale].email.required),
    message: yup
      .string()
      .required(errorMessages[currentLocale].message.required)
  });
  const form = document.querySelector("form") as HTMLElement;
  const submitButton = document.querySelector(".submit") as HTMLElement;
  const requiredInputs = document.querySelectorAll(
    "input[required],textarea[required]"
  ) as NodeListOf<HTMLInputElement>;
  const clearAlert = (inputElement: HTMLInputElement) => {
    const inputId = inputElement.getAttribute("id");
    const alert = document.querySelector(`#${inputId}-alert`) as HTMLElement;

    inputElement.classList.remove("is-invalid");
    alert.innerHTML = "";
  };

  const clearAllAlerts = () => {
    requiredInputs.forEach((requiredInput) => clearAlert(requiredInput));
  };

  const displayErrors = (errors: { [key: string]: string }) => {
    let hasFocus = false;

    Object.keys(errors).forEach((fieldName) => {
      const alert = document.querySelector(
        `#${fieldName}-alert`
      ) as HTMLElement;
      const inputField = document.querySelector(`#${fieldName}`) as HTMLElement;
      const error = errors[fieldName];

      alert.innerHTML = error;
      inputField.classList.add("is-invalid");

      if (!hasFocus) {
        inputField.focus({ preventScroll: true });
        inputField.scrollIntoView({
          behavior: "smooth",
          block: "center"
        });
        hasFocus = true;
      }
    });
  };

  const validateFormData = async (
    formData: FormData
  ): Promise<{ [key: string]: string }> => {
    try {
      await messageFormSchema.validate(formData, { abortEarly: false });

      return {};
    } catch (error) {
      const errors: { [key: string]: string } = {};

      if (error instanceof yup.ValidationError) {
        error.inner.forEach((err: yup.ValidationError) => {
          if (err.path && !errors[err.path]) {
            errors[err.path] = err.message;
          }
        });
      }

      return errors;
    }
  };

  const isFormValid = async () => {
    const formData: FormData = {
      name: (document.querySelector("#name") as HTMLInputElement).value,
      // eslint-disable-next-line perfectionist/sort-objects
      email: (document.querySelector("#email") as HTMLInputElement).value,
      message: (document.querySelector("#message") as HTMLInputElement).value
    };

    const errors = await validateFormData(formData);

    if (Object.keys(errors).length === 0) {
      return true;
    } else {
      displayErrors(errors);
      return false;
    }
  };

  const changeSubmitButtonState = (state: "default" | "loading") => {
    const loadingElem = document.querySelector(".loading") as HTMLElement;
    const defaultElem = document.querySelector(".default") as HTMLElement;

    if (state === "loading") {
      submitButton.setAttribute("disabled", "true");
      loadingElem.classList.remove("hidden");
      defaultElem.classList.add("hidden");
    } else {
      submitButton.removeAttribute("disabled");
      loadingElem.classList.add("hidden");
      defaultElem.classList.remove("hidden");
    }
  };

  const clearInputFields = () => {
    requiredInputs.forEach((input) => (input.value = ""));
  };

  const handleFormSubmit = async (event: Event) => {
    event.preventDefault();
    clearAllAlerts();
    const isValid = await isFormValid();

    if (isValid) {
      const form = document.querySelector("form") as HTMLFormElement;
      const formData = new FormData(form);
      const urlParams = new URLSearchParams();

      formData.forEach((value, key) => {
        urlParams.append(key, value as string);
      });

      changeSubmitButtonState("loading");

      fetch("/", {
        body: urlParams.toString(),
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        method: "POST"
      })
        .then(() => {
          changeSubmitButtonState("default");
          toast.success("Message sent successfully");
          let audio = new Audio("/audios/success.mp3");
          audio.play();
          clearInputFields();
        })
        .catch((error) => {
          changeSubmitButtonState("default");
          toast.error("Message couldn't be sent");
          let audio = new Audio("/audios/error.mp3");
          audio.play();
          console.error(error);
        });
    }
  };

  requiredInputs.forEach((requiredInput) => {
    requiredInput.addEventListener("input", () => clearAlert(requiredInput));
  });

  form?.addEventListener("submit", handleFormSubmit);
</script>
