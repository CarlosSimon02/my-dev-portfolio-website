---
import type { LanguageKeys } from "@/i18n/languages";
import type { HeadProps } from "@/types";

import MainHead from "@/components/MainHead.astro";
import Button from "@/components/atoms/Button.astro";
import ScrollNumbers, {
  type SectionsType
} from "@/components/molecules/ScrollNumbers.astro";
import Socials from "@/components/molecules/Socials.astro";
import Footer from "@/components/organisms/Footer.astro";
import Header from "@/components/organisms/Header.astro";
import MobileMenu from "@/components/organisms/MobileMenu.astro";
import { uiLayoutTranslations } from "@/i18n/uiLayoutTranslations";
import "@/styles/global.css";

type Props = {
  metadata: HeadProps;
  sections: SectionsType;
};

const { metadata, sections } = Astro.props;
const { lang } = Astro.params as { lang: LanguageKeys };
const t = uiLayoutTranslations[lang];
---

<html data-ui-mode="dark" lang={lang}>
  <MainHead {...metadata} />
  <body
    class:list={[
      "grid min-h-screen bg-primary-50 font-lexend text-secondary-700",
      "[&_*:focus-visible]:outline-dashed [&_*:focus-visible]:outline-accent-500"
    ]}
    data-current-section=""
  >
    <Button
      class="skip-to-main-button sr-only left-4 top-4 z-50 max-w-fit focus:not-sr-only focus:fixed"
    >
      {t.skipToMainContent}
    </Button>
    <Header class="fixed top-0 z-10 w-full" translations={t.header} />
    <main
      class="before:block before:h-[4.3rem] before:w-full lg:before:h-[5.5rem]"
      id="main-content"
    >
      <slot />
    </main>
    <Footer class="mb-8 mt-32 md:mb-14 md:mt-44" translations={t.footer} />
    <Socials translations={t.socials} />
    <ScrollNumbers sections={sections} translations={t.scrollNumbers} />
    <MobileMenu translations={t.mobileMenu} />
    <script>
      const body = document.querySelector("body") as HTMLElement;
      const sections = document.querySelectorAll(
        "section"
      ) as NodeListOf<HTMLElement>;
      const skipToMainButton = document.querySelector(
        ".skip-to-main-button"
      ) as HTMLElement;
      const mainContent = document.querySelector(
        "#main-content"
      ) as HTMLElement;

      const isInView = (element: HTMLElement) => {
        const header = document.querySelector("header") as HTMLElement;
        const headerHeight = header.offsetHeight;

        const scrollTop =
          document.documentElement.scrollTop || document.body.scrollTop;
        const elementTop = element.offsetTop;
        const elementBottom = elementTop + element.offsetHeight;

        return (
          elementTop - scrollTop - headerHeight <= 0 &&
          elementBottom - scrollTop - headerHeight > 1
        );
      };

      const setCurrentSection = (sectionHash: string) => {
        body.dataset.currentSection = sectionHash;
      };

      const getCurrentSection = () => {
        return body.dataset.currentSection as string;
      };

      const getElementOffsetTop = (element: HTMLElement) => {
        const header = document.querySelector("header") as HTMLElement;
        const headerHeight = header.offsetHeight;

        return element.offsetTop - headerHeight + 1;
      };

      const getSectionOfHash = (hash: string) => {
        return Array.from(sections).find(
          (section) => section.getAttribute("data-link") === hash
        );
      };

      const scrollToFocus = (element: HTMLElement) => {
        if (!isInView(element)) {
          const focusOnSection = () => {
            element.setAttribute("tabindex", "-1");
            element.focus({ preventScroll: true });
            element.removeAttribute("tabindex");

            window.removeEventListener("scrollend", focusOnSection);
          };

          window.addEventListener("scrollend", focusOnSection);

          window.scrollTo({
            behavior: "smooth",
            top: getElementOffsetTop(element)
          });
        }
      };

      const updateHashOnSectionInView = () => {
        const currentSection = getCurrentSection();

        for (let i = 0; i < sections.length; i++) {
          const hashOfSection = sections[i].getAttribute("data-link") || "";

          if (isInView(sections[i]) && hashOfSection !== currentSection) {
            setCurrentSection(hashOfSection);
            break;
          }
        }
      };

      const handleScrollEnd = () => {
        updateHashOnSectionInView();
      };

      const handleResize = () => {
        updateHashOnSectionInView();
      };

      const handleCurrentSectionChange = () => {
        const currentSection = getCurrentSection();
        const targetSection = getSectionOfHash(currentSection) as HTMLElement;
        scrollToFocus(targetSection);
      };

      const handlePageLoad = () => {
        const currentHash = window.location.hash;

        if (currentHash) {
          setCurrentSection(currentHash);
        } else {
          const hashOfFirstSection =
            sections[0].getAttribute("data-link") || "";
          setCurrentSection(hashOfFirstSection);
        }
      };

      const handleHashChange = () => {
        const currentHash = window.location.hash;

        if (currentHash) {
          setCurrentSection(currentHash);
        }
      };

      const observeCurrentSection = () => {
        const observer = new MutationObserver(handleCurrentSectionChange);
        observer.observe(body, {
          attributeFilter: ["data-current-section"],
          attributes: true
        });
      };

      skipToMainButton.addEventListener("click", () => {
        mainContent.setAttribute("tabindex", "-1");
        mainContent.focus();
        window.scrollTo({ behavior: "smooth", top: 0 });
        mainContent.removeAttribute("tabindex");
      });

      window.addEventListener("scrollend", handleScrollEnd);
      window.addEventListener("resize", handleResize);
      window.addEventListener("hashchange", handleHashChange);
      window.addEventListener("DOMContentLoaded", handlePageLoad);
      observeCurrentSection();
    </script>
  </body>
</html>
