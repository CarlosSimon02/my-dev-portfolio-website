---
import type { LanguageKeys } from "@/i18n/languages";
import type { HeadProps } from "@/types";

import MainHead from "@/components/MainHead.astro";
import Button from "@/components/atoms/Button.astro";
import ScrollNumbers, {
  type SectionsType
} from "@/components/molecules/ScrollNumbers.astro";
import Socials from "@/components/molecules/Socials.astro";
import Footer from "@/components/organisms/Footer.astro";
import Header from "@/components/organisms/Header.astro";
import MobileMenu from "@/components/organisms/MobileMenu.astro";
import { uiLayoutTranslations } from "@/i18n/uiLayoutTranslations";

type Props = {
  metadata: HeadProps;
  sections: SectionsType;
};

const { metadata, sections } = Astro.props;
const { lang } = Astro.params as { lang: LanguageKeys };
const t = uiLayoutTranslations[lang];
---

<html data-ui-mode="dark" lang={lang}>
  <MainHead {...metadata} />
  <body
    class:list={[
      "grid min-h-screen bg-primary-50 font-lexend text-secondary-700",
      "[&_*:focus-visible]:outline-dashed [&_*:focus-visible]:outline-accent-500"
    ]}
  >
    <!-- Google Tag Manager (noscript) -->
    <noscript>
      <iframe
        height="0"
        src="https://www.googletagmanager.com/ns.html?id=GTM-PQVR64CL"
        style="display:none;visibility:hidden"
        width="0"></iframe>
    </noscript>
    <!-- End Google Tag Manager (noscript) -->
    <Button
      class="skip-to-main-button sr-only left-4 top-4 z-50 max-w-fit focus:not-sr-only focus:fixed"
    >
      {t.skipToMainContent}
    </Button>
    <Header class="fixed top-0 z-10 w-full" translations={t.header} />
    <main
      class="before:block before:h-[4.3rem] before:w-full lg:before:h-[5.5rem]"
      id="main-content"
    >
      <slot />
    </main>
    <Footer class="mb-8 mt-32 md:mb-14 md:mt-44" translations={t.footer} />
    <Socials translations={t.socials} />
    <ScrollNumbers sections={sections} translations={t.scrollNumbers} />
    <MobileMenu translations={t.mobileMenu} />
    <script>
      const sections = document.querySelectorAll(
        "section"
      ) as NodeListOf<HTMLElement>;
      const skipToMainButton = document.querySelector(
        ".skip-to-main-button"
      ) as HTMLElement;
      const mainContent = document.querySelector(
        "#main-content"
      ) as HTMLElement;

      const isInView = (element: HTMLElement) => {
        const header = document.querySelector("header") as HTMLElement;
        const headerHeight = header.offsetHeight;

        const scrollTop =
          document.documentElement.scrollTop || document.body.scrollTop;
        const elementTop = element.offsetTop;
        const elementBottom = elementTop + element.offsetHeight;

        return (
          elementTop - scrollTop - headerHeight <= 0 &&
          elementBottom - scrollTop - headerHeight > 1
        );
      };

      const getElementOffsetTop = (element: HTMLElement) => {
        const header = document.querySelector("header") as HTMLElement;
        const headerHeight = header.offsetHeight;

        return element.offsetTop - headerHeight + 1;
      };

      const getSectionOfHash = (hash: string) => {
        return Array.from(sections).find(
          (section) => section.getAttribute("data-link") === hash
        );
      };

      const scrollToFocus = (element: HTMLElement) => {
        if (!isInView(element)) {
          const focusOnSection = () => {
            element.setAttribute("tabindex", "-1");
            element.focus({ preventScroll: true });
            element.removeAttribute("tabindex");

            window.removeEventListener("scrollend", focusOnSection);
          };

          window.addEventListener("scrollend", focusOnSection);

          window.scrollTo({
            behavior: "smooth",
            top: getElementOffsetTop(element)
          });
        }
      };

      const updateHashOnSectionInView = () => {
        for (let i = 0; i < sections.length; i++) {
          const hashOfSection = sections[i].getAttribute("data-link") || "";

          if (isInView(sections[i]) && hashOfSection !== window.location.hash) {
            window.location.hash = hashOfSection;
            break;
          }
        }
      };

      const handleScrollEnd = () => {
        updateHashOnSectionInView();
      };

      const handleResize = () => {
        updateHashOnSectionInView();
      };

      const handleHashChange = () => {
        const currentHash = window.location.hash;
        const targetSection = getSectionOfHash(currentHash) as HTMLElement;
        scrollToFocus(targetSection);
      };

      const handlePageLoad = () => {
        const currentHash = window.location.hash;

        if (currentHash) {
          const targetSection = getSectionOfHash(currentHash) as HTMLElement;
          scrollToFocus(targetSection);
        } else {
          const hashOfFirstSection =
            sections[0].getAttribute("data-link") || "";
          window.location.hash = hashOfFirstSection;
        }
      };

      skipToMainButton.addEventListener("click", () => {
        mainContent.setAttribute("tabindex", "-1");
        mainContent.focus();
        window.scrollTo({ behavior: "smooth", top: 0 });
        mainContent.removeAttribute("tabindex");
      });

      window.addEventListener("scrollend", handleScrollEnd);
      window.addEventListener("resize", handleResize);
      window.addEventListener("hashchange", handleHashChange);
      window.addEventListener("DOMContentLoaded", handlePageLoad);
    </script>
    <style>
      @import "jolty-ui";

      :root {
        --primary-50: 0 0% 100%;
        --primary-200: 210 40% 97.08%;
        --primary-201: 215.29 19.32% 34.51%;

        --secondary-500: 215 20.22% 65.1%;
        --secondary-501: 215.38 16.32% 46.86%;
        --secondary-550: 215.38 16.32% 86.86%;
        --secondary-700: 215.29 19.32% 34.51%;
        --secondary-950: 222.22 47.37% 11.18%;

        --accent-500: 32.13 94.62% 43.73%;

        --red-500: 0 72.22% 50.59%;

        --pfp-bg: 0 0% 77.25%;

        color-scheme: light;
      }

      :root[data-ui-mode="dark"] {
        --primary-50: 222.22 47.37% 11.18%;
        --primary-200: 220.71 42.42% 13.24%;
        --primary-201: 217.24 32.58% 17.45%;

        --secondary-500: 215.29 19.32% 34.51%;
        --secondary-501: 215.29 25% 26.67%;
        --secondary-550: 215.29 19.32% 20.51%;
        --secondary-700: 215 20.22% 65.1%;
        --secondary-950: 0 0% 100%;

        --accent-500: 37.69 92.13% 50.2%;

        --red-500: 0 84.24% 60.2%;

        --pfp-bg: 0 0% 77.25%;

        color-scheme: dark;
      }

      @keyframes fade-in {
        from {
          visibility: hidden;
          background: rgba(0, 0, 0, 0);
        }
        1% {
          visibility: visible;
          background: rgba(0, 0, 0, 0);
        }
        to {
          visibility: visible;
          background: rgba(0, 0, 0, 0.5);
        }
      }

      @keyframes fade-out {
        from {
          visibility: visible;
          background: rgba(0, 0, 0, 0.5);
        }
        99% {
          visibility: visible;
          background: rgba(0, 0, 0, 0);
        }
        to {
          visibility: hidden;
          background: rgba(0, 0, 0, 0);
        }
      }

      .dialog-backdrop {
        position: fixed;
        z-index: 40;
        top: 0;
        right: 0;
        left: var(--side-panel);
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        height: 100%;
        width: 100%;
        visibility: hidden;
      }

      .dialog-backdrop.inactive {
        animation: fade-out 400ms cubic-bezier(0.4, 0, 0.2, 1) forwards;
      }

      .dialog-backdrop.active {
        animation: fade-in 400ms cubic-bezier(0.4, 0, 0.2, 1) forwards;
      }

      .has-dialog {
        overflow: hidden;
      }
    </style>
  </body>
</html>
